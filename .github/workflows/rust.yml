name: rust

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

on:
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]
    paths:
      - '**/workflows/rust.yml'
      - '**/*.rs'
      - '**/Cargo.*'
  push:
    branches: [ main, master ]
    tags: [ latest, v*, "*-nightly" ]
  repository_dispatch:
    types: [ rust ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:  [ ubuntu-latest ] # [ ubuntu-latest, macos-latest, windows-latest ]
        target: [ x86_64-unknown-linux-gnu ] # [ x86_64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc, wasm32-unknown-unknown, wasm32-wasip1, wasm32-wasip2 ]
        toolchain: [ stable ]
    runs-on: ${{ matrix.os }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
          override: true
      -
        name: Build the workspace
        run: cargo build --release --locked --workspace --all-features --target ${{ matrix.target }}
  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        features:  [ all, default, full, ] # [ all, default, full, alloc, no_std ]
        target: [ x86_64-unknown-linux-gnu ] # [ x86_64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc, wasm32-unknown-unknown, wasm32-wasip1, wasm32-wasip2 ]
        toolchain: [ stable ]
        include:
          - features: all
            target: x86_64-unknown-linux-gnu
            toolchain: stable
          - features: default
            target: x86_64-unknown-linux-gnu
            toolchain: stable
          - features: full
            target: x86_64-unknown-linux-gnu
            toolchain: stable
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
          override: true
      -
        if: matrix.features == ('full')
        name: Test (${{ matrix.features }})
        run: cargo test -r --locked --workspace --target ${{ matrix.target}} --features ${{ matrix.features }}
      -
        if: matrix.features == 'default'
        name: Test (default)
        run: cargo test -r --locked --workspace --target ${{ matrix.target}}
      -
        if: matrix.features == 'all'
        name: Test (all-features)
        run: cargo test -r --locked --workspace --target ${{ matrix.target}} --all-features
      -
        name: Test (alloc)
        if: matrix.toolchain == 'nightly' && matrix.features == 'alloc'
        continue-on-error: true
        env:
          RUSTFLAGS: "-C panic=abort -Z panic_abort_tests"
        run: cargo test -r --locked --workspace --target ${{ matrix.target}} --no-default-features --features ${{ matrix.features }}
      -
        name: Test (no_std)
        continue-on-error: true
        if: matrix.toolchain == 'nightly' && matrix.features == 'no_std'
        env:
          RUSTFLAGS: "-C panic=abort -Z panic_abort_tests"
        run: cargo test -r --locked --workspace --target ${{ matrix.target}} --no-default-features
  benchmark:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event.action == 'repository_dispatch' && github.event.action == 'rust'
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os:  [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      -
        name: Benchmark
        run: cargo bench --verbose --workspace --features full

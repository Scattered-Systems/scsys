name: Rust

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  CARGO_TERM_COLOR: always

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]
  repository_dispatch:
    types: [ rust ]
  workflow_dispatch:

jobs:
  workspace:
    strategy:
      matrix:
        platform: [ ubuntu-latest ] # [ macos-latest, ubuntu-latest, windows-latest ]
        target: [ x86_64-unknown-linux-gnu ]
        toolchain: [ stable, nightly ]
    runs-on: ${{ matrix.platform }}
    steps:
      - 
        name: checkout
        uses: actions/checkout@v4
      - 
        name: rustup
        run: |
          rustup default ${{ matrix.toolchain }} 
          rustup update
      - 
        name: build
        run: cargo build --all-features -r -v --workspace --target ${{ matrix.target }}
      - 
        name: test
        run: cargo test --all-features -r -v --workspace --target ${{ matrix.target }}
      - 
        continue-on-error: true
        name: Test (no_std)
        run: cargo test --no-default-features -p scsys-core -r -v
      - 
        name: bench
        if: matrix.toolchain == 'nightly'
        run: cargo bench --all-features -v --workspace
      - 
        id: rust-cache
        name: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-
  no_std:
    continue-on-error: true
    name: Build (no_std)
    strategy:
      matrix:
        package: [ core ]
        flags: [ --no-default-features ]
        toolchain: [ stable, nightly ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - 
        name: rustup
        run: rustup default ${{ matrix.toolchain }} && rustup update


